# Day 5: Doesn't He Have Intern-Elves For This?

```elixir
Mix.install([
  {:kino, "~> 0.12.3"}
])
```

## Modules

````elixir
defmodule NiceStrings do
  @moduledoc """
  Functions for identifying nice strings.
  """

  @typedoc "The ruleset used to identify nice strings"
  @type rules :: :part1 | :part2

  @doc """
  Identifies if a string is nice, given a ruleset.

  ## Examples
  ```elixir
  iex> NiceStrings.nice_string?("ugknbfddgicrmopn", :part1)
  true
  iex> NiceStrings.nice_string?("jchzalrnumimnmhp", :part1)
  false
  iex> NiceStrings.nice_string?("qjhvhtzxzqqjkmpb", :part2)
  true
  iex> NiceStrings.nice_string?("uurcxstgmygtbstg", :part2)
  false
  ```
  """
  @spec nice_string?(String.t(), rules()) :: boolean()
  def nice_string?(str, rules)

  def nice_string?(str, :part1) do
    contains_three_vowels?(str) and
      contains_double_letter?(str) and
      not contains_illegal_substring?(str)
  end

  def nice_string?(str, :part2) do
    contains_pair_twice?(str) and
      contains_repeat_with_letter_between?(str)
  end

  # does the string have three vowels? using "a", "e", "i", "o" or "u"
  defp contains_three_vowels?(str), do: String.match?(str, ~r/(.*(a|e|i|o|u).*){3}/)

  # does the string contain a repeating letter consecutively? eg. "aa" or "pp"
  defp contains_double_letter?(str), do: String.match?(str, ~r/(\w)\1/)

  # does the string contain an illegal substring? "ab", "cd", "pq" or "xy"
  defp contains_illegal_substring?(str), do: String.match?(str, ~r/(ab|cd|pq|xy)/)

  # does the string contain the same pair of letters twice? eg. "rfaaiotaa" does
  defp contains_pair_twice?(str), do: String.match?(str, ~r/(\w\w).*(\1)/)

  # does the string contain a substring like "rtr" or "zxz" or "lgl"
  defp contains_repeat_with_letter_between?(str), do: String.match?(str, ~r/(\w)\w(\1)/)
end
````

## Input

```elixir
input = Kino.Input.textarea("Please paste your puzzle input:")
```

## Part 1

```elixir
input
|> Kino.Input.read()
|> String.split("\n")
|> Enum.count(&NiceStrings.nice_string?(&1, :part1))
```

## Part 2

```elixir
input
|> Kino.Input.read()
|> String.split("\n")
|> Enum.count(&NiceStrings.nice_string?(&1, :part2))
```
