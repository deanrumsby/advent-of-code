# Day 5: Doesn't He Have Intern-Elves For This?

```elixir
Mix.install([
  {:kino, "~> 0.12.3"}
])
```

## Input

```elixir
input = Kino.Input.textarea("Please paste your puzzle input:")
```

## Part 1

We can define functions to check each of the given rules through the use `String.match?/2`. The problem then reduces to counting up the strings that pass each of the checks. Luckily for us, `Enum.count/2` allows us to filter out the successful matches by passing in a function to run on each element, providing us with the answer.

```elixir
defmodule Part1 do
  def nice_string?(str) do
    contains_three_vowels?(str) and
      contains_double_letter?(str) and
      not contains_illegal_substring?(str)
  end

  defp contains_three_vowels?(str), do: String.match?(str, ~r/(.*(a|e|i|o|u).*){3}/)
  defp contains_double_letter?(str), do: String.match?(str, ~r/(\w)\1/)
  defp contains_illegal_substring?(str), do: String.match?(str, ~r/(ab|cd|pq|xy)/)
end
```

```elixir
input
|> Kino.Input.read()
|> String.split("\n")
|> Enum.count(&Part1.nice_string?(&1))
```

## Part 2

We can use the same strategy for part 2. We define the new rules and count up all the matching strings.

```elixir
defmodule Part2 do
  def nice_string?(str) do
    contains_pair_twice?(str) and
      contains_repeat_with_letter_between?(str)
  end

  defp contains_pair_twice?(str), do: String.match?(str, ~r/(\w\w).*(\1)/)
  defp contains_repeat_with_letter_between?(str), do: String.match?(str, ~r/(\w)\w(\1)/)
end
```

```elixir
input
|> Kino.Input.read()
|> String.split("\n")
|> Enum.count(&Part2.nice_string?(&1))
```
