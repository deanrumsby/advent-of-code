# Day 1: Not Quite Lisp

```elixir
Mix.install([
  {:kino, "~> 0.12.0"}
])
```

## Modules

````elixir
defmodule Santa do
  @moduledoc """
  Functions for navigating Santa up and down a large apartment
  building. 
  """

  @typedoc "The direction of travel"
  @type direction() :: :up | :down

  @doc """
  Provides Santa with directions to follow. Returns the floor number reached.

  ## Example
  ```elixir
  iex> [:up, :up, :up, :down, :up, :down]
  iex> |> Santa.follow()
  2
  ```
  """
  @spec follow(Enumerable.t(direction())) :: integer()
  def follow(directions) do
    directions
    |> Enum.reduce(0, &next_floor/2)
  end

  @doc """
  Finds the position such that Santa first enters a specified floor, given
  a sequence of directions.

  ## Example
  ```elixir
  iex> [:up, :down, :up, :up, :down, :down]
  iex> |> Santa.find_floor(2)
  4
  ```
  """
  @spec find_floor(Enumerable.t(direction()), integer()) :: pos_integer()
  def find_floor(directions, desired_floor) do
    directions
    |> Stream.with_index()
    |> Enum.reduce_while(0, fn
      {_, position}, ^desired_floor -> {:halt, position}
      {direction, _}, floor -> {:cont, next_floor(direction, floor)}
    end)
  end

  defp next_floor(direction, current_floor)
  defp next_floor(:up, current_floor), do: current_floor + 1
  defp next_floor(:down, current_floor), do: current_floor - 1
end
````

````elixir
defmodule Parser do
  @moduledoc """
  For parsing a string into directions that Santa can follow.
  """

  @doc """
  Parses a string of parentheses into a stream of directions.

  ## Example
  ```elixir
  iex> Parser.parse("))(()")
  iex> |> Enum.to_list()
  [:down, :down, :up, :up, :down]
  """
  @spec parse(String.t()) :: Enumerable.t(Santa.direction())
  def parse(str) do
    str
    |> String.graphemes()
    |> Stream.map(&direction/1)
  end

  defp direction(symbol)
  defp direction("("), do: :up
  defp direction(")"), do: :down
end
````

## Input

```elixir
input = Kino.Input.textarea("Please paste your puzzle input:")
```

## Part 1

We need a way to follow all the directions given to us by the Elves. We start by mapping our input string into a sequence of directions `:up` and `:down`, using `Parser.parse/1`. We could have used the characters `')'` and `'('` directly, however I prefer to decouple the input from the rest of the functions we create.

To follow the directions, I create a function `Santa.follow/1` which takes the directions and returns the floor number Santa arrives at by following them.

```elixir
input
|> Kino.Input.read()
|> Parser.parse()
|> Santa.follow()
```

## Part 2

In part 2 we still parse the directions the same as before, but now we need to create a new function to help us find the basement.

The function `Sata.find_floor/1` takes in the stream of directions and returns the position of the first direction that causes Santa to enter the specified floor.

```elixir
input
|> Kino.Input.read()
|> Parser.parse()
|> Santa.find_floor(-1)
```
