# Day 1: Not Quite Lisp

```elixir
Mix.install([
  {:kino, "~> 0.12.0"}
])
```

## Input

```elixir
input = Kino.Input.textarea("Please paste your puzzle input:")
```

## Part 1

To determine the floor Santa arrives at, we just need to iterate/ process each of the instructions whilst tracking the current floor number. This is the perfect job for a reducer, which we can extract as the following `Part1.next_floor/2` function.

```elixir
defmodule Part1 do
  def next_floor(instruction, current_floor) do
    case instruction do
      "(" -> current_floor + 1
      ")" -> current_floor - 1
    end
  end
end
```

```elixir
input
|> Kino.Input.read()
|> String.graphemes()
|> Enum.reduce(0, &Part1.next_floor/2)
```

## Part 2

To find the position at which Santa enters the basement, we can follow the same procedure as before, but by using `Stream.with_index/1` and `Enum.reduce_while/3` we can halt the procedure and return the position/index once we reach the basement. Since the rules for changing floor are the same as in Part 1, we will continue to use `Part1.next_floor/2` in Part 2.

```elixir
defmodule Part2 do
  defdelegate next_floor(instruction, current_floor), to: Part1
end
```

```elixir
input
|> Kino.Input.read()
|> String.graphemes()
|> Stream.with_index()
|> Enum.reduce_while(0, fn
  {_, position}, -1 -> {:halt, position}
  {instruction, _}, floor -> {:cont, Part2.next_floor(instruction, floor)}
end)
```
