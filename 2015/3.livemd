# Day 3: Perfectly Spherical Houses in a Vacuum

```elixir
Mix.install([
  {:kino, "~> 0.12.3"}
])
```

## Modules

````elixir
defmodule Santa do
  @moduledoc """
  Functions for directing Santa and Robo-Santa within an
  infinite 2D grid of houses
  """

  defstruct x: 0, y: 0, visited: MapSet.new([{0, 0}])

  @typedoc "A Santa struct"
  @type t :: %__MODULE__{
          x: integer(),
          y: integer(),
          visited: MapSet.t(location())
        }

  @typedoc "The directions Santa can move in"
  @type direction :: :east | :south | :west | :north

  @typedoc "The coordinates for a location"
  @type location :: {integer(), integer()}

  @doc """
  Follow the directions provided for Santa.
  When Santa moves, any newly visited locations are also stored.

  ## Example
  ```elixir
  iex> Santa.follow(%Santa{}, [:east, :north, :north])
  %Santa{x: 1, y: 2, visited: MapSet.new([{0,0}, {1, 0}, {1, 1}, {1, 2}])}
  ```
  """
  @spec follow(Santa.t(), list(direction())) :: Santa.t()
  def follow(santa, directions) do
    directions
    |> Enum.reduce(santa, &move(&2, &1))
  end

  @doc """
  Follow the directions provided for Santa, shared with Robo-Santa. 
  Each pair of directions are split between Santa and Robo-Santa. 
  Each Santa stores it's newly visited locations on each move.

  ## Example
  ```elixir
  iex> Santa.follow(%Santa{}, %Santa{}, [:south, :west])
  [
    %Santa{x: 0, y: -1, visited: MapSet.new([{0, 0}, {0, -1}])},
    %Santa{x: -1, y: 0, visited: MapSet.new([{0, 0}, {-1, 0}])},
  ]
  ```
  """
  @spec follow(Santa.t(), Santa.t(), list(direction())) :: list(Santa.t())
  def follow(santa, robo_santa, directions) do
    directions
    |> Enum.chunk_every(2)
    |> Enum.reduce([santa, robo_santa], fn
      directions, santas -> Enum.zip_with(santas, directions, &move/2)
    end)
  end

  @doc """
  The total number of unique locations visited by Santa.

  ## Example
  ```elixir
  iex> Santa.follow(%Santa{}, [:east, :west, :east, :west])
  iex> |> Santa.total_visited()
  2
  ```
  """
  @spec total_visited(Santa.t()) :: pos_integer()
  def total_visited(santa) do
    MapSet.size(santa.visited)
  end

  @doc """
  The total number of unique locations visited by Santa and Robo-Santa
  combined.

  ## Example
  ```elixir
  iex> [santa, robo_santa] = Santa.follow(%Santa{}, %Santa{}, [:east, :west, :east, :west])
  iex> Santa.total_visited(santa, robo_santa)
  5
  ```
  """
  @spec total_visited(Santa.t(), Santa.t()) :: pos_integer()
  def total_visited(santa, robo_santa) do
    MapSet.union(santa.visited, robo_santa.visited)
    |> MapSet.size()
  end

  # update positon and locations of santa
  defp move(santa, direction) do
    {x, y} = next_location(santa, direction)
    %{santa | x: x, y: y, visited: MapSet.put(santa.visited, {x, y})}
  end

  # determine coordinates of next location
  defp next_location(santa, direction) do
    %Santa{x: x, y: y} = santa

    case direction do
      :east -> {x + 1, y}
      :south -> {x, y - 1}
      :west -> {x - 1, y}
      :north -> {x, y + 1}
    end
  end
end
````

````elixir
defmodule Parser do
  @moduledoc """
  For parsing a string into a stream of directions.
  """

  @doc """
  Parses a string into a stream of directions.

  ## Example
  ```elixir
  iex> Parser.parse("><^^v")
  iex> |> Enum.to_list()
  [:east, :west, :north, :north, :south]
  ```
  """
  @spec parse(String.t()) :: Enumerable.t(Santa.direction())
  def parse(str) do
    str
    |> String.graphemes()
    |> Stream.map(&direction/1)
  end

  # parse direction
  defp direction(str)
  defp direction(">"), do: :east
  defp direction("v"), do: :south
  defp direction("<"), do: :west
  defp direction("^"), do: :north
end
````

## Input

```elixir
input = Kino.Input.textarea("Please paste your puzzle input:")
```

## Part 1

```elixir
input
|> Kino.Input.read()
|> Parser.parse()
|> then(&Santa.follow(%Santa{}, &1))
|> Santa.total_visited()
```

## Part 2

```elixir
[santa, robo_santa] =
  input
  |> Kino.Input.read()
  |> Parser.parse()
  |> then(&Santa.follow(%Santa{}, %Santa{}, &1))

Santa.total_visited(santa, robo_santa)
```
