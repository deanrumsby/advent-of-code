# Day 3: Perfectly Spherical Houses in a Vacuum

```elixir
Mix.install([
  {:kino, "~> 0.12.3"}
])
```

## Input

```elixir
input = Kino.Input.textarea("Please paste your puzzle input:")
```

## Shared Modules

````elixir
defmodule Santa do
  defstruct x: 0, y: 0

  @doc """
  Updates a Santa's position given a direction

  ## Example
  ```elixir
  iex> Santa.move(%Santa{x: 1, y: 6}, "^")
  %Santa{x: 1, y: 7}
  """
  def move(santa, direction) do
    case direction do
      ">" -> %{santa | x: santa.x + 1}
      "v" -> %{santa | y: santa.y - 1}
      "<" -> %{santa | x: santa.x - 1}
      "^" -> %{santa | y: santa.y + 1}
    end
  end

  @doc """
  Takes a list of Santas and a list of directions (of the same size) and returns 
  a list of updated Santas. Each Santa is updated by the direction with the same index. 

  ## Example
  ```elixir
  iex> Santa.coordinate([%Santa{x: 3, y: 2}, %Santa{x: 1, y: 1}], ["<", "v"])
  [%Santa{x: 2, y: 2}, %Santa{x: 1, y: 0}]
  ```
  """
  def coordinate(santas, directions) do
    Enum.zip_with(santas, directions, &move/2)
  end
end
````

## Part 1

We use `Enum.map_reduce/3` in combination with `Santa.move/2` to create an enumeration of all the positions Santa visits. We then count all the unique entries to produce our answer.

```elixir
{positions, final_position} =
  Kino.Input.read(input)
  |> String.graphemes()
  |> Enum.map_reduce(%Santa{}, &{&2, Santa.move(&2, &1)})

Stream.concat(positions, [final_position])
|> Stream.uniq()
|> Enum.count()
```

## Part 2

Now there are two Santas, our directions naturally partition into groups of two, which we can model using `Stream.chunk_every/2`. We make use of `Santa.coordinate/2` to delegate the movement of both Santas with respect to this new data shape. Since `Santa.coordinate/2` returns a list, we use `Enum.flat_map_reduce/3` to simultaneously flatten our results ready for counting.

```elixir
{positions, final_positions} =
  Kino.Input.read(input)
  |> String.graphemes()
  |> Stream.chunk_every(2)
  |> Enum.flat_map_reduce([%Santa{}, %Santa{}], &{&2, Santa.coordinate(&2, &1)})

Stream.concat(positions, final_positions)
|> Stream.uniq()
|> Enum.count()
```
